package com.exmaple.jarvis.chat.Activity;import android.content.Intent;import android.graphics.Bitmap;import android.graphics.BitmapFactory;import android.net.Uri;import android.os.Bundle;import android.text.Editable;import android.text.TextWatcher;import android.view.View;import android.widget.ImageView;import android.widget.TextView;import com.exmaple.jarvis.chat.Constant;import com.exmaple.jarvis.chat.CustomImageView;import com.exmaple.jarvis.chat.Dialog.IntentDialog;import com.google.android.material.textfield.TextInputEditText;import com.google.android.material.textfield.TextInputLayout;import com.raywenderlich.android.validatetor.ValidateTor;import java.io.FileNotFoundException;import java.io.InputStream;import java.util.Map;import javax.xml.validation.Validator;import androidx.appcompat.app.AppCompatActivity;import androidx.cardview.widget.CardView;import androidx.fragment.app.FragmentManager;import okhttp3.RequestBody;public class RegisterActivity extends AppCompatActivity {    private ImageView img_back;    private CustomImageView img_avatar;    private TextView tv_login_reminder;    private CardView cv_login;    private TextInputLayout til_username, til_password, til_display_name, til_email;    private TextInputEditText et_username, et_password, et_display_name, et_email;    private ValidateTor validateTor = new ValidateTor();    private IntentDialog dialog = new IntentDialog();    private Map<String, String> requestBodyData = null;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_register);        setViewElement();        setViewElementEvent();    }    // image result    @Override    protected void onActivityResult(int requestCode, int resultCode, Intent imageReturnedIntent) {        super.onActivityResult(requestCode, resultCode, imageReturnedIntent);        dialog.dismiss();        switch (requestCode){            case 0:                if (resultCode == RESULT_OK && imageReturnedIntent.getExtras().get("data") != null){                    Bitmap selectedImage = (Bitmap) imageReturnedIntent.getExtras().get("data");                    img_avatar.setImageBitmap(selectedImage);                }            case 1:                if (resultCode == RESULT_OK && imageReturnedIntent.getData() != null) {                    final Uri imageUri = imageReturnedIntent.getData();                    InputStream imageStream = null;                    try {                        imageStream = getContentResolver().openInputStream(imageUri);                    } catch (FileNotFoundException e) {                        e.printStackTrace();                    }                    final Bitmap selectedImage = BitmapFactory.decodeStream(imageStream);                    img_avatar.setImageBitmap(selectedImage);                }        }    }    private void showDialog() {        FragmentManager fragmentManager = getSupportFragmentManager();        dialog.show(fragmentManager, "dialog");    }    private void setViewElement() {        img_back = findViewById(R.id.img_back);        img_avatar = findViewById(R.id.img_avatar);        tv_login_reminder = findViewById(R.id.tv_login_reminder);        cv_login = findViewById(R.id.cv_login);        et_username = findViewById(R.id.et_username);        et_password = findViewById(R.id.et_password);        et_display_name = findViewById(R.id.et_display_name);        et_email = findViewById(R.id.et_email);        til_username = findViewById(R.id.til_username);        til_password = findViewById(R.id.til_password);        til_display_name = findViewById(R.id.til_display_name);        til_email = findViewById(R.id.til_email);    }    private void setViewElementEvent() {        img_back.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                finish();            }        });        tv_login_reminder.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                finish();            }        });        img_avatar.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                showDialog();            }        });        // EditText checking        et_username.addTextChangedListener(new TextWatcher() {            @Override            public void beforeTextChanged(CharSequence s, int start, int count, int after) {            }            @Override            public void onTextChanged(CharSequence s, int start, int before, int count) {            }            @Override            public void afterTextChanged(Editable s) {                if (s.length() < 8)                    til_username.setError(getString(R.string.min_char_length));                else                    til_username.setError(null);            }        });        et_password.addTextChangedListener(new TextWatcher() {            @Override            public void beforeTextChanged(CharSequence s, int start, int count, int after) {            }            @Override            public void onTextChanged(CharSequence s, int start, int before, int count) {            }            @Override            public void afterTextChanged(Editable s) {                if (s.length() < 8)                    til_password.setError(getString(R.string.min_char_length));                else                    til_password.setError(null);            }        });        et_display_name.addTextChangedListener(new TextWatcher() {            @Override            public void beforeTextChanged(CharSequence s, int start, int count, int after) {            }            @Override            public void onTextChanged(CharSequence s, int start, int before, int count) {            }            @Override            public void afterTextChanged(Editable s) {                if (s.length() < 1)                    til_display_name.setError(getString(R.string.display_name_cannot_empty));                else                    til_display_name.setError(null);            }        });        et_email.addTextChangedListener(new TextWatcher() {            @Override            public void beforeTextChanged(CharSequence s, int start, int count, int after) {            }            @Override            public void onTextChanged(CharSequence s, int start, int before, int count) {            }            @Override            public void afterTextChanged(Editable s) {                if (validateTor.isEmail(et_email.getText().toString())) {                    til_email.setError(null);                } else {                    til_email.setError("Please enter correct format email");                }            }        });        cv_login.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                requestBodyData.put("a", "b");//                Constant.generateRequestBody();//                register();            }        });    }}